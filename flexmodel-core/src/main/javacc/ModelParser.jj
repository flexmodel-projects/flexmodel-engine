options {
    STATIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(ModelParser)
package tech.wetech.flexmodel.parser.impl;

import java.util.*;

public class ModelParser {

    // 定义 AST 节点接口
    public interface ASTNode { }

    // Model 对象，包含模型名称、字段列表和模型级注解
    public static class Model implements ASTNode {
        public String name;
        public List<Field> fields = new ArrayList<>();
        public List<Annotation> annotations = new ArrayList<>();
        public Model(String name) { this.name = name; }
        public void addField(Field f) { fields.add(f); }
        public void addAnnotation(Annotation ann) { annotations.add(ann); }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append("model ").append(name).append(" {\n");
            // 输出字段定义
            for (Field f : fields) {
                sb.append("  ").append(f.toString()).append(",\n");
            }
            // 输出模型级注解（放在字段后面）
            for (Annotation ann : annotations) {
                sb.append("  ").append(ann.toString()).append(",\n");
            }
            sb.append("}");
            return sb.toString();
        }

    }

    // Field 对象，表示模型中的一个字段，包含名称、可选标记、类型及字段级注解
    public static class Field implements ASTNode {
        public String name;
        public boolean optional;
        public String type;
        public List<Annotation> annotations = new ArrayList<>();
        public Field(String name, boolean optional, String type){
            this.name = name;
            this.optional = optional;
            this.type = type;
        }
        public void addAnnotation(Annotation ann) { annotations.add(ann); }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(name);
            if (optional) {
                sb.append("?");
            }
            sb.append(" : ").append(type);
            if (!annotations.isEmpty()) {
                for (Annotation ann : annotations) {
                    sb.append(" ").append(ann.toString());
                }
            }
            return sb.toString();
        }
    }

    // Annotation 对象，保存注解名称和参数（键值对），参数类型为 Object
    public static class Annotation implements ASTNode {
        public String name;
        public Map<String, Object> parameters = new LinkedHashMap<>();
        public Annotation(String name) { this.name = name; }
        public void addParameter(String key, Object value) {
            parameters.put(key, value);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append("@").append(name);
            if (!parameters.isEmpty()) {
                sb.append("(");
                boolean first = true;
                if (parameters.size()==1 && parameters.containsKey("value")) {
                  return sb.append("\"").append(parameters.get("value")).append("\"").append(")").toString();
                }
                for (Map.Entry<String, Object> entry : parameters.entrySet()) {
                    if (!first) {
                        sb.append(", ");
                    }
                    first = false;
                    sb.append(entry.getKey()).append(": ");
                    Object value = entry.getValue();
                    if (value instanceof String) {
                        sb.append("\"").append(value).append("\"");
                    } else if (value instanceof List) {
                        sb.append(listToString((List<?>) value));
                    } else if (value instanceof Map) {
                        sb.append(mapToString((Map<?, ?>) value));
                    } else {
                        sb.append(value);
                    }
                }
                sb.append(")");
            }
            return sb.toString();
        }

        // 辅助方法，将 List 转换为 sdl 数组字面量表示
        private String listToString(List<?> list) {
            StringBuilder sb = new StringBuilder();
            sb.append("[");
            boolean first = true;
            for (Object elem : list) {
                if (!first) {
                    sb.append(", ");
                }
                first = false;
                if (elem instanceof String) {
                    sb.append(elem);
                } else if (elem instanceof Map) {
                    sb.append(mapToString((Map<?, ?>) elem));
                } else {
                    sb.append(elem);
                }
            }
            sb.append("]");
            return sb.toString();
        }

        // 辅助方法，将 Map 转换为 sdl 内联注解表示
        private String mapToString(Map<?, ?> map) {
          StringBuilder sb = new StringBuilder();
          boolean first = true;
          for (Map.Entry<?, ?> entry : map.entrySet()) {
            if (!first) {
              sb.append(", ");
            }
            first = false;
            sb.append(entry.getKey()).append(": ");
            Object value = entry.getValue();
            if (value instanceof String) {
              sb.append("\"").append(value).append("\"");
            } else if (value instanceof Map<?, ?>) {
              sb.append("(").append(mapToString((Map<?, ?>)value)).append(")");
            } else if (value instanceof List<?>) {
              sb.append(listToString((List<?>)value));
            } else {
              sb.append(value);
            }
          }
          return sb.toString();
        }
    }

    // Enumeration 对象，保存枚举名称和枚举值列表
    public static class Enumeration implements ASTNode {
        public String name;
        public List<String> elements = new ArrayList();
        public Enumeration(String name) { this.name = name; }
        public void addElement(String value) { elements.add(value); }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append("enum ").append(name).append(" {\n");
            for (String e : elements) {
                sb.append("  ").append(e).append(",\n");
            }
            sb.append("}");
            return sb.toString();
        }

    }

    public static void main(String[] args) throws ParseException {
        ModelParser parser = new ModelParser(System.in);
        List ast = parser.CompilationUnit();
        System.out.println("Parsing successful.");
        for (Object node : ast) {
            System.out.println(node);
        }
    }
}
PARSER_END(ModelParser)

/* 跳过规则 */
// 跳过空白字符
SKIP : { <WHITESPACE: ( " " | "\t" | "\r" | "\n" )+ > }
// 跳过单行注释（支持 Unicode）
SKIP : { <SINGLE_LINE_COMMENT: "//" (~["\r", "\n"])* ( "\r" | "\n" | "\r\n" ) > }
// 跳过多行注释（支持 Unicode）
SKIP : { <MULTI_LINE_COMMENT: "/*" (~["*"] | "*" ~["/"])* "*/" > }

/* 关键字和符号 */
TOKEN : { < MODEL: "model" > }
TOKEN : { < ENUM: "enum" > }
TOKEN : { < AT: "@" > }
TOKEN : { < COLON: ":" > }
TOKEN : { < COMMA: "," > }
TOKEN : { < QUESTION: "?" > }
TOKEN : { < LPAREN: "(" > }
TOKEN : { < RPAREN: ")" > }
TOKEN : { < LBRACE: "{" > }
TOKEN : { < RBRACE: "}" > }
TOKEN : { < LBRACKET: "[" > }
TOKEN : { < RBRACKET: "]" > }
TOKEN : { < STRING_LITERAL: "\"" (~["\"", "\\"])* "\"" > }
TOKEN : { < INTEGER_LITERAL: (["0"-"9"])+ > }
TOKEN : { < TRUE: "true" > }
TOKEN : { < FALSE: "false" > }
TOKEN : { < IDENTIFIER: (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "0"-"9", "_"])* > }

/* 入口产生式，返回 AST 节点列表 */
List CompilationUnit() : { List astList = new ArrayList(); Object node; }
{
    (
        node = ModelDeclaration() { astList.add(node); }
      | node = EnumDeclaration()  { astList.add(node); }
    )* <EOF>
    { return astList; }
}

/* 解析 model 定义，返回 Model 对象 */
Model ModelDeclaration() : { String modelName; Model model; }
{
    <MODEL> modelName = Identifier() <LBRACE>
        { model = new Model(modelName); }
        ModelBody(model)
    <RBRACE>
    { return model; }
}

/* 解析 model 内部内容，既可以是字段定义，也可以是模型级注解 */
void ModelBody(Model model) : {}
{
    ( ModelMember(model) ( <COMMA> )? )*
}

/* ModelMember 可以是字段定义或模型级注解 */
void ModelMember(Model model) : {}
{
    FieldMember(model) | ModelAnnotation(model)
}

/* 解析字段定义 */
void FieldMember(Model model) : {}
{
    { String fieldName; boolean optional = false; String typeName; Field field; }
    fieldName = Identifier()
    ( <QUESTION> { optional = true; } )?
    <COLON>
    typeName = Type()
    { field = new Field(fieldName, optional, typeName); }
    AnnotationList_Field(field)
    { model.addField(field); }
}

/* 解析字段级注解列表 */
void AnnotationList_Field(Field field) : {}
{
    ( Annotation_Field(field) )*
}

/* 解析字段级注解 */
void Annotation_Field(Field field) : { String annName; Annotation ann; }
{
    <AT> annName = Identifier()
    {
       ann = new Annotation(annName);
       field.addAnnotation(ann);
    }
    ( <LPAREN> AnnotationArguments(ann) <RPAREN> )?
}

/* 解析模型级注解 */
void ModelAnnotation(Model model) : { String annName; Annotation ann; }
{
    <AT> annName = Identifier()
    {
       ann = new Annotation(annName);
       model.addAnnotation(ann);
    }
    ( <LPAREN> AnnotationArguments(ann) <RPAREN> )?
}

/* 解析注解参数列表，支持多个参数 */
void AnnotationArguments(Annotation ann) : {}
{
    AnnotationArgument(ann) ( <COMMA> AnnotationArgument(ann) )*
}

/* 解析单个注解参数，支持键值对或默认参数 */
void AnnotationArgument(Annotation ann) : { Object value; Token t; }
{
    (
      t = <IDENTIFIER> <COLON> value = AnnotationValue() { ann.addParameter(t.image, value); }
    | value = AnnotationValue() { ann.addParameter("value", value); }
    )
}

/* 解析注解值，返回 Object 类型，支持字符串、整型、布尔字面量、数组字面量或标识符 */
Object AnnotationValue() : { Token t; Object s; }
{
    t = <STRING_LITERAL> { return t.image.substring(1, t.image.length()-1); }
  | t = <INTEGER_LITERAL> { return t.image; }
  | t = <TRUE> { return t.image; }
  | t = <FALSE> { return t.image; }
  | s = ArrayLiteral() { return s; }
  | s = Identifier() { return s; }
}

/* 解析数组字面量，返回 List 对象 */
Object ArrayLiteral() : { List list = new ArrayList(); Object elem; }
{
    <LBRACKET>
    ( elem = ArrayElement() { list.add(elem); } ( <COMMA> elem = ArrayElement() { list.add(elem); } )* ( <COMMA> )? )?
    <RBRACKET>
    { return list; }
}

/* 解析单个数组元素，支持内联注解参数 */
Object ArrayElement() : { Map inline = null; String id; }
{
    id = Identifier() (<COLON>)?
    ( <LPAREN> { inline = InlineAnnotation(); } <RPAREN> )?
    {
       if (inline == null) return id;
       else { Map m = new LinkedHashMap(); m.put(id, inline); return m; }
    }
}

/* 解析内联注解参数列表，返回 Map */
Map InlineAnnotation() : { Map m = new LinkedHashMap(); }
{
    InlineAnnotationPair(m)
    ( <COMMA> InlineAnnotationPair(m) )*
    { return m; }
}

/* 解析单个内联注解参数 */
void InlineAnnotationPair(Map m) : { String key; Object value; }
{
    key = Identifier() <COLON> value = AnnotationValue() { m.put(key, value); }
}

/* 解析枚举定义，返回 Enumeration 对象 */
Enumeration EnumDeclaration() : { String enumName; Enumeration enu; }
{
    <ENUM> enumName = Identifier() <LBRACE>
        { enu = new Enumeration(enumName); }
        EnumBody(enu)
    <RBRACE>
    { return enu; }
}

/* 解析枚举体，要求至少有一个枚举值，并允许最后一个元素后跟可选逗号 */
void EnumBody(Enumeration enu) : {}
{
    EnumValue(enu) ( <COMMA> EnumValue(enu) )* ( <COMMA> )?
}

/* 解析单个枚举值 */
void EnumValue(Enumeration enu) : { String value; }
{
    value = Identifier() { enu.addElement(value); }
}

/* 解析类型，可选数组标记 */
String Type() : { String baseType; }
{
    baseType = Identifier() ( <LBRACKET> <RBRACKET> { baseType += "[]"; } )?
    { return baseType; }
}

/* 解析标识符，返回标识符字符串 */
String Identifier() : { Token t; }
{
    t = <IDENTIFIER> { return t.image; }
}
