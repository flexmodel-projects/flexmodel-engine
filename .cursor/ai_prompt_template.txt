# FlexModel DSL AI 提示模板

## 基本提示格式

当用户请求使用FlexModel DSL语法时，请遵循以下模板：

### 1. 简单查询提示
```
请使用FlexModel DSL语法创建一个简单查询，要求：
- 使用QueryDSL.simple()方法
- 选择字段：[字段列表]
- 条件：[条件描述]
- 排序：[排序要求]
- 分页：[分页要求]

请提供完整的代码示例，并解释每个方法的作用。
```

### 2. 复杂查询提示
```
请使用FlexModel DSL语法创建一个复杂查询，要求：
- 使用QueryDSL.query()方法
- 涉及模型：[模型列表]
- 连接关系：[连接描述]
- 聚合函数：[聚合要求]
- 分组：[分组要求]
- 条件：[条件描述]

请提供完整的代码示例，并解释每个部分的作用。
```

### 3. 条件表达式提示
```
请使用FlexModel DSL语法构建条件表达式，要求：
- 使用QueryDSL.where()方法
- 条件：[具体条件描述]
- 逻辑关系：[AND/OR关系]

请提供完整的条件表达式代码，并解释逻辑关系。
```

## 核心规则提醒

在回答任何FlexModel DSL相关问题时，请始终记住：

1. **模型概念优先**：使用 `model()` 而不是 `table()`
2. **语法简洁性**：优先使用 `QueryDSL.simple()` 进行简单查询
3. **方法正确性**：确保使用正确的方法名和参数
4. **代码完整性**：提供完整的代码示例，包括必要的导入
5. **解释说明**：解释每个方法的作用和使用场景

## 错误检查清单

在提供代码示例前，请检查：

- [ ] 是否使用了 `model()` 而不是 `table()`
- [ ] 是否选择了合适的查询构建器（simple() vs query()）
- [ ] 方法名是否正确
- [ ] 语法结构是否完整
- [ ] 是否提供了必要的解释

## 示例响应格式

```
根据您的要求，我为您提供以下FlexModel DSL查询代码：

```java
// 导入必要的类
import tech.wetech.flexmodel.QueryDSL;
import tech.wetech.flexmodel.Direction;

// 查询代码
Query query = QueryDSL.simple()
    .select("id", "name", "email")
    .where(QueryDSL.where("status").eq("active"))
    .orderBy("name", Direction.ASC)
    .limit(20)
    .build();
```

**代码解释：**
- `QueryDSL.simple()`: 创建简单查询构建器
- `select()`: 选择需要的字段
- `where()`: 设置查询条件
- `orderBy()`: 设置排序规则
- `limit()`: 设置结果数量限制
- `build()`: 构建最终的Query对象

**注意事项：**
- 使用了模型概念而非表概念
- 选择了适合的简单查询构建器
- 提供了完整的代码结构
```

## 常见场景模板

### 用户查询场景
```
用户想要查询[具体需求]，请使用FlexModel DSL语法提供解决方案。
```

### 错误修复场景
```
用户遇到了以下错误：[错误描述]，请提供修复方案。
```

### 性能优化场景
```
用户想要优化以下查询的性能：[查询代码]，请提供优化建议。
```

### 迁移场景
```
用户想要将以下原始语法迁移到新的DSL语法：[原始代码]，请提供迁移方案。
```

## 质量保证

确保每个回答都包含：
1. 完整的代码示例
2. 详细的解释说明
3. 相关的注意事项
4. 最佳实践建议
5. 错误预防提示

这样可以帮助用户更好地理解和使用FlexModel DSL语法。 