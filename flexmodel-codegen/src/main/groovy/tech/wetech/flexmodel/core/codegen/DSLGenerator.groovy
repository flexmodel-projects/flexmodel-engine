package tech.wetech.flexmodel.core.codegen

import tech.wetech.flexmodel.codegen.GenerationContext

import java.nio.file.Path

/**
 * DSLGenerator Class
 * Generates Java DSL classes based on the provided model definitions.
 * Uses the new optimized FlexModel DSL syntax.
 *
 * Author: cjbi
 */
class DSLGenerator extends AbstractGenerator {

  @Override
  String getTargetFile(GenerationContext context, String targetDirectory) {
    return Path.of(targetDirectory, "dsl", context.modelClass.getShortClassName() + "DSL.java").toString()
  }

/**
 * Writes the Java class content to the GroovyPrintWriter.
 *
 * @param out Print writer to output the Java class code.
 * @param className The name of the class.
 * @param context The generation context with model details.
 */
  void writeModel(PrintWriter out, GenerationContext context) {
    def modelClass = context.modelClass
    def className = modelClass.shortClassName
    def fields = modelClass.allFields
    String rootPackage = context.getVariable("rootPackage");

    // Write package statement
    out.println "package ${rootPackage}.dsl;"
    out.println ""

    // Write import statements
    if (modelClass.imports) {
      modelClass.imports.each { importStatement ->
        out.println "import ${importStatement};"
      }
      out.println ""
    }

    out.println ""
    out.println "import tech.wetech.flexmodel.QueryDSL;"
    out.println "import tech.wetech.flexmodel.dsl.Predicate;"
    out.println "import tech.wetech.flexmodel.Query;"
    out.println "import tech.wetech.flexmodel.Direction;"
    out.println "import java.util.List;"
    out.println ""

    // Write class-level comments
    out.println "/**"
    if (modelClass.comment) {
      out.println " * ${modelClass.comment}"
    }
    out.println " * Generated DSL class for ${modelClass.shortClassName} using optimized FlexModel DSL syntax."
    out.println " * Provides fluent API for building queries with model concept."
    out.println " * Generated by Flexmodel Generator"
    out.println " */"

    // Write class declaration
    out.println "public class ${className}DSL {"
    out.println ""
    out.println "  // Model name for this DSL"
    out.println "  private static final String MODEL_NAME = \"${modelClass.original.name}\";"
    out.println ""

    // Write field-based DSL methods
    fields.findAll { f -> !f.isRelationField() }.each { field ->
      out.println ""
      if (field.comment) {
        out.println "  /**"
        out.println "   * ${field.comment}"
        out.println "   */"
      }
      out.println "  public static Predicate ${field.variableName}() {"
      out.println "    return QueryDSL.where(\"${field.original.name}\");"
      out.println "  }"
    }

    out.println ""
    out.println "  /**"
    out.println "   * Creates a simple query for ${modelClass.shortClassName}."
    out.println "   *"
    out.println "   * @return QueryDSL.simple() builder for ${modelClass.shortClassName}"
    out.println "   */"
    out.println "  public static QueryDSL.SimpleQueryBuilder simple() {"
    out.println "    return QueryDSL.simple();"
    out.println "  }"
    out.println ""

    out.println "  /**"
    out.println "   * Creates a complex query for ${modelClass.shortClassName}."
    out.println "   *"
    out.println "   * @return QueryDSL.query() builder for ${modelClass.shortClassName}"
    out.println "   */"
    out.println "  public static QueryDSL.QueryBuilder query() {"
    out.println "    return QueryDSL.query();"
    out.println "  }"
    out.println ""

    out.println "  /**"
    out.println "   * Creates a basic find query for ${modelClass.shortClassName}."
    out.println "   *"
    out.println "   * @return Query for finding ${modelClass.shortClassName} records"
    out.println "   */"
    out.println "  public static Query find() {"
    out.println "    return QueryDSL.simple()"
    out.println "        .select(\"*\")"
    out.println "        .build();"
    out.println "  }"
    out.println ""

    out.println "  /**"
    out.println "   * Creates a find query with specific fields for ${modelClass.shortClassName}."
    out.println "   *"
    out.println "   * @param fields The fields to select"
    out.println "   * @return Query for finding ${modelClass.shortClassName} records"
    out.println "   */"
    out.println "  public static Query find(String... fields) {"
    out.println "    return QueryDSL.simple()"
    out.println "        .select(fields)"
    out.println "        .build();"
    out.println "  }"
    out.println ""

    out.println "  /**"
    out.println "   * Creates a find query with condition for ${modelClass.shortClassName}."
    out.println "   *"
    out.println "   * @param predicate The condition predicate"
    out.println "   * @return Query for finding ${modelClass.shortClassName} records"
    out.println "   */"
    out.println "  public static Query find(Predicate predicate) {"
    out.println "    return QueryDSL.simple()"
    out.println "        .select(\"*\")"
    out.println "        .where(predicate)"
    out.println "        .build();"
    out.println "  }"
    out.println ""

    out.println "  /**"
    out.println "   * Creates a find query with condition and fields for ${modelClass.shortClassName}."
    out.println "   *"
    out.println "   * @param predicate The condition predicate"
    out.println "   * @param fields The fields to select"
    out.println "   * @return Query for finding ${modelClass.shortClassName} records"
    out.println "   */"
    out.println "  public static Query find(Predicate predicate, String... fields) {"
    out.println "    return QueryDSL.simple()"
    out.println "        .select(fields)"
    out.println "        .where(predicate)"
    out.println "        .build();"
    out.println "  }"
    out.println ""

    out.println "  /**"
    out.println "   * Creates a count query for ${modelClass.shortClassName}."
    out.println "   *"
    out.println "   * @return Query for counting ${modelClass.shortClassName} records"
    out.println "   */"
    out.println "  public static Query count() {"
    out.println "    return QueryDSL.query()"
    out.println "        .select(select -> select.count(\"count\", \"id\"))"
    out.println "        .build();"
    out.println "  }"
    out.println ""

    out.println "  /**"
    out.println "   * Creates a count query with condition for ${modelClass.shortClassName}."
    out.println "   *"
    out.println "   * @param predicate The condition predicate"
    out.println "   * @return Query for counting ${modelClass.shortClassName} records"
    out.println "   */"
    out.println "  public static Query count(Predicate predicate) {"
    out.println "    return QueryDSL.query()"
    out.println "        .select(select -> select.count(\"count\", \"id\"))"
    out.println "        .where(predicate)"
    out.println "        .build();"
    out.println "  }"
    out.println ""

    // Close class
    out.println "}"
  }

}
