package tech.wetech.flexmodel.codegen
/**
 * PojoGenerator Class
 * Generates Java POJOs based on the provided model definitions.
 *
 * Author: cjbi
 */
class PojoGenerator extends AbstractGenerator {

  /**
   * Writes the Java class content to the GroovyPrintWriter.
   *
   * @param out Print writer to output the Java class code.
   * @param className The name of the class.
   * @param context The generation context with model details.
   */
  def generate(PrintWriter out, GenerationContext context) {
    def modelClass = context.modelClass
    def className = modelClass.shortClassName
    def fields = modelClass.allFields

    // Write package statement
    out.println "package ${modelClass.packageName};"
    out.println ""

    // Write import statements
    if (modelClass.imports) {
      modelClass.imports.each { importStatement ->
        out.println "import ${importStatement};"
      }
      out.println ""
    }

    // Write class-level comments
    out.println "/**"
    if (modelClass.comment) {
      out.println " * ${modelClass.comment}"
    }
    out.println " * Generated by Flexmodel Generator"
    out.println " */"

    // Write class declaration
    out.println "@ModelName(\"${modelClass.originalModel.name}\")"
    out.println "public class ${className} {"

    // Write field declarations
    fields.each { field ->
      out.println ""
      if (field.comment) {
        out.println "  /**"
        out.println "   * ${field.comment}"
        out.println "   */"
      }
      if (field.isRelationField()) {
        out.println "  @ModelRelation"
      }
      out.println "  @ModelField(\"${field.originalField.name}\")"
      out.println "  private ${field.shortTypeName} ${field.variableName};"
    }

    // Write getter and setter methods
    fields.each { field ->
      generateGetter(out, field)
      generateSetter(out, field)
    }
    if (modelClass.idField) {
      generateToString(out, modelClass)
      generateEquals(out, modelClass)
    }
    out.println ""
    // Close class
    out.println "}"
  }

  /**
   * Generates a getter method for a given field.
   *
   * @param out Print writer to output the getter method.
   * @param field Field details for which the getter is generated.
   */
  def generateGetter(PrintWriter out, field) {
    out.println ""
    out.println "  public ${field.shortTypeName} get${field.variableName.capitalize()}() {"
    out.println "    return ${field.variableName};"
    out.println "  }"
  }

  /**
   * Generates a setter method for a given field.
   *
   * @param out Print writer to output the setter method.
   * @param field Field details for which the setter is generated.
   */
  def generateSetter(PrintWriter out, field) {
    out.println ""
    out.println "  public void set${field.variableName.capitalize()}(${field.shortTypeName} ${field.variableName}) {"
    out.println "    this.${field.variableName} = ${field.variableName};"
    out.println "  }"
  }


  def generateToString(PrintWriter out, ModelClass modelClass) {
    out.println ""
    out.println "  @Override"
    out.println "  public String toString() {"
    out.println "    return this.getClass().getSimpleName() + \"<\" + get${modelClass.idField.variableName.capitalize()}() + \">\";"
    out.println "  }"
  }

  def generateEquals(PrintWriter out, ModelClass modelClass) {
    out.println ""
    out.println "  @Override"
    out.println "  public boolean equals(Object obj) {"
    out.println "    if (this.get${modelClass.idField.variableName.capitalize()}() != null && obj instanceof ${modelClass.shortClassName}) {"
    out.println "      return this.get${modelClass.idField.variableName.capitalize()}().equals(((${modelClass.shortClassName}) obj).get${modelClass.idField.variableName.capitalize()}());"
    out.println "    }"
    out.println "    return super.equals(obj);"
    out.println "  }"
  }

}
