package tech.wetech.flexmodel.codegen


import java.nio.file.Path

/**
 * @author cjbi
 */
class SchemaGenerator extends AbstractGenerator {

  @Override
  String getTargetFile(GenerationContext context, String targetDirectory) {
    return Path.of(targetDirectory, StringUtils.capitalize(context.getSchemaName()) + ".java").toString()
  }

  /**
   * Writes the Java class content to the GroovyPrintWriter.
   *
   * @param out Print writer to output the Java class code.
   * @param context The generation context with model details.
   */
  @Override
  void write(PrintWriter out, GenerationContext context) {
    def modelClassList = context.modelClassList
    def className = StringUtils.snakeToCamel(context.schemaName).capitalize()

    out.println "package ${context.packageName};"
    out.println ""
    out.println "import tech.wetech.flexmodel.codegen.ObjectUtils;"
    out.println "import tech.wetech.flexmodel.BuildItem;"
    out.println "import tech.wetech.flexmodel.model.EntityDefinition;"
    out.println "import tech.wetech.flexmodel.model.EnumDefinition;"
    out.println "import tech.wetech.flexmodel.model.SchemaObject;"
    out.println "import tech.wetech.flexmodel.ModelImportBundle;"

    out.println ""
    out.println "import java.util.ArrayList;"
    out.println "import java.util.List;"
    out.println ""

    // Write class-level comments
    out.println "/**"
    out.println " * Generated by Flexmodel Generator"
    out.println " */"

    out.println "public class ${className} implements BuildItem {"

    out.println ""
    out.println "  @Override"
    out.println "  public String getSchemaName() {"
    out.println "    return \"${context.schemaName}\";"
    out.println "  }"
    out.println ""
    out.println "  @Override"
    out.println "  public List<SchemaObject> getSchema() {"
    out.println "    List<SchemaObject> list = new ArrayList<>();"
    out.println "    try {"
    modelClassList.each { model ->
      out.println "      EntityDefinition ${model.variableName} = (EntityDefinition) ObjectUtils.deserialize(\"${ObjectUtils.serialize(model.original)}\");"
    }
    context.enumClassList.each { model ->
      out.println "      EnumDefinition ${model.variableName} = (EnumDefinition) ObjectUtils.deserialize(\"${ObjectUtils.serialize(model.original)}\");"
    }
    modelClassList.each { model ->
      out.println "      list.add(${model.variableName});"
    }
    context.enumClassList.each { anEnum ->
      out.println "      list.add(${anEnum.variableName});"
    }
    out.println "    } catch (Exception e) {"
    out.println "      e.printStackTrace();"
    out.println "    }"
    out.println "    return list;"
    out.println "  }"
    out.println ""
    out.println "  @Override"
    out.println "  @SuppressWarnings(\"all\")"
    out.println "  public List<ModelImportBundle.ImportData> getData() {"
    out.println "    List<ModelImportBundle.ImportData> list = new ArrayList<>();"
    out.println "    try {"
    List<?> list = context.import_data;
    list.each {
      out.println "      list.add((ModelImportBundle.ImportData) ObjectUtils.deserialize(\"${ObjectUtils.serialize(it)}\"));"
    }
    out.println "    } catch (Exception e) {"
    out.println "      e.printStackTrace();"
    out.println "    }"
    out.println "    return list;"
    out.println "  }"
    out.println "}"

  }

}
