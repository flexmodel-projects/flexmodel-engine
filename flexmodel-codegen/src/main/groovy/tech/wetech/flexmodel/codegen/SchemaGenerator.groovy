package tech.wetech.flexmodel.codegen



/**
 * @author cjbi
 */
class SchemaGenerator extends AbstractModelListGenerator {

  /**
   * Writes the Java class content to the GroovyPrintWriter.
   *
   * @param out Print writer to output the Java class code.
   * @param context The generation context with model details.
   */
  @Override
  def generate(PrintWriter out, ModelListGenerationContext context) {
    String rootPackage = context.getVariable("rootPackage");
    def modelListClass = context.modelListClass
    def className = modelListClass.schemaName.capitalize()

    out.println "package ${context.modelListClass.packageName};"
    out.println ""
    out.println "import tech.wetech.flexmodel.codegen.ObjectUtils;"
    out.println "import tech.wetech.flexmodel.BuildItem;"
    out.println "import tech.wetech.flexmodel.Entity;"
    out.println "import tech.wetech.flexmodel.Enum;"
    out.println "import tech.wetech.flexmodel.SchemaObject;"
    out.println "import tech.wetech.flexmodel.ImportDescribe;"
    modelListClass.modelList.each {
      out.println "import ${rootPackage}.dsl.${it.shortClassName}DSL;"
    }

    out.println ""
    out.println "import java.util.ArrayList;"
    out.println "import java.util.List;"
    out.println ""

    // Write class-level comments
    out.println "/**"
    out.println " * Generated by Flexmodel Generator"
    out.println " */"

    out.println "public class ${className} implements BuildItem {"

    modelListClass.modelList.each { model ->
      out.println ""
      if (model.comment) {
        out.println "  /**"
        out.println "   * ${model.comment}"
        out.println "   */"
      }
      out.println "  public static final ${model.shortClassName}DSL ${model.variableName} = new ${model.shortClassName}DSL();"
    }
    out.println ""
    out.println "  @Override"
    out.println "  public String getSchemaName() {"
    out.println "    return \"${context.modelListClass.schemaName}\";"
    out.println "  }"
    out.println ""
    out.println "  @Override"
    out.println "  public List<SchemaObject> getSchema() {"
    out.println "    List<SchemaObject> list = new ArrayList<>();"
    out.println "    try {"
    modelListClass.modelList.each { model ->
      out.println "      Entity ${model.variableName} = (Entity) ObjectUtils.deserialize(\"${ObjectUtils.serialize(model.originalModel)}\");"
    }
    modelListClass.enumList.each { model ->
      out.println "      Enum ${model.variableName} = (Enum) ObjectUtils.deserialize(\"${ObjectUtils.serialize(model.originalEnum)}\");"
    }
    modelListClass.modelList.each { model ->
      out.println "      list.add(${model.variableName});"
    }
    modelListClass.enumList.each { anEnum ->
      out.println "      list.add(${anEnum.variableName});"
    }
    out.println "    } catch (Exception e) {"
    out.println "      e.printStackTrace();"
    out.println "    }"
    out.println "    return list;"
    out.println "  }"
    out.println ""
    out.println "  @Override"
    out.println "  @SuppressWarnings(\"all\")"
    out.println "  public List<ImportDescribe.ImportData> getData() {"
    out.println "    List<ImportDescribe.ImportData> list = new ArrayList<>();"
    out.println "    try {"
    List<?> list = context.getVariable("import_data");
    list.each {
      out.println "      list.add((ImportDescribe.ImportData) ObjectUtils.deserialize(\"${ObjectUtils.serialize(it)}\"));"
    }
    out.println "    } catch (Exception e) {"
    out.println "      e.printStackTrace();"
    out.println "    }"
    out.println "    return list;"
    out.println "  }"
    out.println "}"

  }

}
